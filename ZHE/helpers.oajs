function cut_corpses() {
        Orion.Exec('cut_corpses_script', true);
}

function cut_corpses_script() {
    var blade_types = '0x0F51|0x13FE|0x23A5|0x237E';
    var cut_delay = 1200;
    // if (Orion.FindType(blade_types).length) {
        var corpses = Orion.FindTypeEx("0x2006|0x0ECC", "any", "ground", "ignoreself|item", 3);
        if (corpses.length) {
            var corpses_remaining = corpses.length;
            add_skinning_timer((corpses_remaining-1)*(cut_delay+200)+500);
            corpses.forEach(function (corpse) {
                if (Orion.HaveTarget()) Orion.CancelTarget();
                var started = Orion.Now();
                var _try = 0;
                while (!Orion.HaveTarget() && _try < 4) {
                    _try++;
                    Orion.UseType(blade_types);
                    Orion.WaitJournal('What would you like to use that on', started-10, Orion.Now() + 100);
                    Orion.WaitForTarget(500);
                    if (Orion.HaveTarget()) {
                        Orion.TargetObject(corpse.Serial());
                        Orion.WaitJournal("You carve|pity|You cut|You cannot|nothing|next time", started, Orion.Now() + 2000);
                        if (corpse != corpses[corpses.length-1]) {
                            corpses_remaining--;
                            self_print('Corpses remaining: '+corpses_remaining, 1260);
                            Orion.Wait(cut_delay);
                        }
                        break;
                    } else { 
                        Orion.Print('Used blade, but haven\'t recieved a target');
                        Orion.Wait(300);
                    }
                    Orion.Wait(100);
                    if ( !Orion.DisplayTimerExists('skinning') ) {
                        add_skinning_timer((corpses_remaining-1)*(cut_delay+200)+500);
                    }
                }
                
            });
        }
        while ( Orion.DisplayTimerExists('skinning') ) {
            Orion.Wait(50);
        }
        Orion.CharPrint(Player.Serial(), 0x031, "No corpses aroud, buddy");
    //}
    //else {
    //    Orion.Print("You have no dagger! Go kill yourself");
    //}

}

function add_skinning_timer(msec) {
    Orion.AddDisplayTimer("skinning", msec, "custom", "LineBar", "Skinning...", SKINNING_TIMER_X, SKINNING_TIMER_Y);
    Orion.DisplayTimerSetIcon("skinning", "Left", "0x122A");
    Orion.DisplayTimerSetSize("skinning", 100, 30);
}

function hungry(level) {
    var level = typeof level !== "undefined" ? level : 90;
    var _food_count = 0;
    const food_types = "0x097b|0x09B7";
    _food_count = count_multi_types(food_types);
    if (_food_count < 20) {
        self_print("[" + _food_count + "] food left!");
    }
    while (Player.Luck() < level && _food_count) {
        _food_count = count_multi_types(food_types);
        Orion.UseType(food_types);
        Orion.Wait(1000);
    }
}

function count_multi_types(types) {
    var _obj_counts = 0
    var _objects = Orion.FindTypeEx(types, "any", "backpack", "item");
    for (var _i = 0; _i < _objects.length; _i++) {
        _obj_counts += _objects[_i].Count();
    }
    return _obj_counts;
}

// checks all the layers, in case any is below {floor} executes notify()
function durability_check(floor) {
    // for future upgrades
    //Dagger has been destroyed.
    //Homunculus lost weapon and can barely hit anyones anymore!
    const regex = /(\d\d?\d?)/g;
    for (var i = 0; i < 24; i++) {
        obj = Orion.ObjAtLayer(i);
        if (!obj) continue;
        var props = obj.Properties();
        if (!Orion.Contains(props, "Durability")) continue;
        var props_array = props.split("\n");
        var durability_string = props_array[props_array.length - 1].slice(11);
        var _matches = durability_string.match(regex);
        var current_dura = _matches[0];
        var max_dura = _matches[1];
        // Orion.Print(current_dura+' of '+max_dura);
        var percentage = current_dura / max_dura * 100;
        // Orion.Print(props_array[0]+' is '+percentage.toFixed(0)+'%')
        if (percentage < floor) notify(props_array[0] + ' is ' + percentage.toFixed(0) + '%');
    }
}

function safe_move(item, to) {
    _item_obj = Orion.FindObject(item);
    if (!_item_obj) {
        Orion.Print('ERROR null item in safe_move()');
        return false;
    }
    _current_item_container = _item_obj.Container();
    _try = 0;
    while (_item_obj.Container() == _current_item_container) {
        Orion.Print("moving... " + _try);
        _try++;
        if (_try > 1) {
            //if (!Orion.InLOS(_item_obj.Container())) {
            //	Orion.CharPrint(_item_obj.Container(), 70, 'Not in LOS!');
            //}
            return;
        }
        if (_try > 3)
            return;
        Orion.DropDraggedItem();
        Orion.Wait(50);
        Orion.MoveItem(item, 0, to);
        Orion.Wait(750);
    }
}
function good_item(item) {
    gold_type = 0x0EED;
    if (!item) {
        Orion.Print('ERROR null item in good_item()');
        return false;
    }
    if (item.Graphic() == gold_type) {
        var _earned = load_from_file(GOLD_FILE_PATH);
        _earned += item.Count();
        save_to_file(GOLD_FILE_PATH, _earned);
        _loot_started_timestamp = load_from_file(LOOT_TIMESTAMP_FILE_PATH);
        _gp_per_min = parseFloat( _earned / ( (Orion.Now() - _loot_started_timestamp)/1000/60 ) ).toFixed(0)
        process_progress_bar(1489, _gp_per_min, GP_PER_MIN_MAX, 
            14893, GOLD_POLY_X, GOLD_POLY_Y,
            148931, ' gp/min', 10, 25+GOLD_POLY_Y-DMG_POLY_Y,
            148932, 'total: '+_earned, 95, 25+GOLD_POLY_Y-DMG_POLY_Y)
        return true;
    }
    if (Orion.Contains(item.Name(), 'Power Scroll')) {
        return true;
    }
    //if item
    return false;
}