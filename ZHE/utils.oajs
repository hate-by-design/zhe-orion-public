// Print message above characters head
function self_print(message, color) {
    // Thank you, stripped version of JS, now I have to use ternary insted of default param value definition
    color = typeof color !== "undefined" ? color : 20;
    Orion.CharPrint(Player.Serial(), color, message);
}

function notify(msg, repeats) {
    self_print(msg, 2190);
    for (_i = 0; _i < repeats; _i++) {
        Orion.PlayWav(NOTIFY_SOUND);
        Orion.Wait(700);
    }
}

function alert(msg, repeats) {
    self_print(msg);
    for (_i = 0; _i < repeats; _i++) {
        Orion.PlayWav(ALERT_SOUND);
        Orion.Wait(700);
    }
}

function discord_post(message) {
    DISCORD_WEBHOOK = "https://discord.com/api/webhooks/859802160363864065/pp3g-J31SBHJe9xtGwETTtgvN6oVcewJkmZqT1vS3FlbPauniEK917UB2LsljUo8I9cs";
    var paramText = "content=[" + Player.Name() + "]   ";
    Orion.HttpPost(DISCORD_WEBHOOK, paramText + message);
}

function color_picker() {
    for (_i = 0; _i < 0xffff; _i += 10) {
        Orion.Wait(10);
        Orion.Print(_i, _i);
        if (_i % 100 == 0) Orion.Wait(500);
    }
}

function value_in_array(v, arr) {
    for (_i = 0; _i < arr.length; _i++) {
        if (v.indexOf(arr[_i]) !== -1) return true;
    }
    return false;
}

function save_to_file(path, data) {
    var _file = Orion.NewFile();
    _file.Open(path);
    _file.Write(data);
    _file.Close();
}

function load_from_file(path, noint) {
    var _file = Orion.NewFile();
    _file.Open(path);
    var noint = typeof noint !== "undefined" ? noint : false;
    if (!noint) {
        var result = parseInt(_file.Read());
    } else {
        var result = _file.Read();
    }
    _file.Close();
    return result;
}

function rewrite_file(path, val) {
    _gold_file = Orion.NewFile(path)
    _gold_file.Remove(path);
    save_to_file(path, val);
}

// Telegram
function telegram_post(message) {
    const TELEGRAM_TOKEN = load_from_file('OA/.telegram-token', true);
    const CHAT_ID = load_from_file('OA/.telegram-chatid');
    if (!TELEGRAM_TOKEN || !CHAT_ID) { 
        Orion.Print('[ERROR] Telegram token and/or chat_id not found.')
        Orion.Print('TELEGRAM_TOKEN = '+ TELEGRAM_TOKEN)
        Orion.Print('CHAT_ID = '+ CHAT_ID)
        return;
    }
    const bot = "https://api.telegram.org/bot"+TELEGRAM_TOKEN+"/sendMessage";
    const paramID = "chat_id=" + CHAT_ID;
    const paramText = "text=";
    const params = paramID + "&" + paramText;
    Orion.HttpPost(bot, params + message);
}