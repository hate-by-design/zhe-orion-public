function services_________zone() {
    Orion.Print('this is delimiter, sorry')
}
function loot_new_age() {
    // TODO: if no 'loot_bag' set in objects, use backpack with warning
    var contents;
    var corpse;
    var _get_content_try;
    var contents_from_loot_list;
    var ignored_corpses = [];
    while (true) {
        while (Player.Dead()) Orion.Wait(100);
        corpse = Orion.FindTypeEx("0x2006|0x0ECC", "any", "ground", "ignoreself|item", 3);
        while (ignored_corpses.length > 50) {
            ignored_corpses.shift();
        }
        for (var c = 0; c < corpse.length; c++) {
            if (  value_in_array(corpse[c].Serial(), ignored_corpses)  ) continue;
            if (Player.Dead()) break;
            if (true) {
                Orion.OpenContainer(corpse[c].Serial())
                Orion.Wait(100);
                _get_content_try = 0;
                contents = Orion.FindTypeEx("any", "any", corpse[c].Serial(), "item");
                while (!contents.length) {
                    _get_content_try++;
                    Orion.Wait(100);
                    contents = Orion.FindTypeEx("any", "any", corpse[c].Serial(), "item");
                    if (_get_content_try > 3) {
                        // Orion.Print('Corpse: no content.')
                        Orion.CharPrint(corpse[c].Serial(), 70, 'No content.');
                        ignored_corpses.push(corpse[c].Serial());
                        break
                    }
                }
                if (!contents.length) continue;
                // GameObjectList Orion.FindListEx('listName', 'container', 'flags', 'distance', 'notoriety', recurse);
                contents_from_loot_list = Orion.FindListEx(LOOT_FINDLIST, corpse[c].Serial(), 'item', 'finddistance', '', true);
                if (contents_from_loot_list.length) {
                    for (var _i = 0; _i < contents_from_loot_list.length; _i++) {
                        Orion.Print('item from loot_list' + contents_from_loot_list[_i].Name())
                        safe_move(contents_from_loot_list[_i].Serial(), 'loot_bag');
                        if (!Orion.InLOS(corpse[c].Serial())) {
                            Orion.CharPrint(corpse[c].Serial(), 70, 'Not in LOS!');
                            ignored_corpses.push(corpse[c].Serial());
                            break;
                        }
                    }
                } else {
                    Orion.Print('No loot from loot list found.')
                }
                Orion.Wait(50);
                contents = Orion.FindTypeEx("any", "any", corpse[c].Serial(), "item");
                if (!contents.length) continue;
                for (var _i = 0; _i < contents.length; _i++) {
                    if (good_item(contents[_i])) {
                        // Orion.CharPrint(corpse[c].Serial(), 70, 'Loot me!');
                        safe_move(contents[_i].Serial(), 'loot_bag');
                        if (!Orion.InLOS(corpse[c].Serial())) {
                            Orion.CharPrint(corpse[c].Serial(), 70, 'Not in LOS!');
                            ignored_corpses.push(corpse[c].Serial());
                            break;
                        }
                    }
                }
                Orion.Wait(10);
                ignored_corpses.push(corpse[c].Serial());
            } else {
                Orion.Print('failed to open');
                Orion.Wait(10);
            }
        }
        Orion.Wait(100);
    }
}

function watch_durability() {
    Orion.Print('Durability warning at: ' + DURABILITY_THRESHOLD + '%');
    while (true) {
        durability_check(DURABILITY_THRESHOLD);
        Orion.Wait(10000);
    }
}

function watch_death() {
    const POST_TO_DISCORD = true; // obvious
    const POST_TO_TELEGRAM = true; // also
    while (true) {
        while (!Player.Dead()) {
            Orion.Wait(5000)
        }
        if (POST_TO_TELEGRAM) telegram_post(' 😢 Dead at X: ' + Player.X() + ' Y: ' + Player.Y());
        if (POST_TO_DISCORD) discord_post(' 😢 Dead at X: ' + Player.X() + ' Y: ' + Player.Y());
        while (Player.Dead()) {
            Orion.Wait(5000)
        }
    }
}

function auto_guards() {
    while (true) {
        if (Orion.InJournal('is attacking you!*', '', 0, 'any', Orion.Now() - 2000)) {
            Orion.Say('.guards');
        }
        Orion.Wait(1000);
    }
}

function auto_hungry() {
    while (true) {
        hungry(90);
        Orion.Wait(2 * 10 * 1000);
    }
}

function lag_watch() {
    latency_gump_creator();
    while (true) {
        lag_check();
        Orion.Wait(10000);
    }
}

function lag_check(unused) {
    const lat_max = 1000;
    const lat_min = 100;
    const width_max = 180;
    const width_min = 10;
    const green = '#66ff66';
    const yellow = '#ffff00';
    const red = '#ff0000';
    const green_text = 70;
    const yellow_text = 50;
    const red_text = 30;
    var request_timestamp = Orion.Now();
    Orion.Say('.online');
    var reply = Orion.WaitJournal('Sys. Load', request_timestamp, request_timestamp + 5000);
    var latency
    if (!reply) {
        latency = 5000;
    } else {
        latency = reply.Timer() - request_timestamp;
    }
    var color = green;
    var text_color = green_text;
    if (latency > 0.3 * lat_max) {
        color = yellow;
        text_color = yellow_text;
    }
    if (latency > 0.5 * lat_max) {
        color = red;
        text_color = red_text;
    }
    if (latency > lat_max) {
        width = width_max;
    } else {
        width = latency / lat_max * width_max;
    }
    var lat_text = latency + 'ms';
    const regex = /(\d\d?%)/g;
    if (reply) {
        var _matches = reply.Text().match(regex);
        if (!_matches.length) load = -1;
        var load = _matches[0];
    }
    sysload_text = 'Load: ' + load;
    var gump = Orion.CreateCustomGump(1488);
    gump.AddColoredPolygone(10, 10, width, 10, color, 0, 5, 1, 55);
    gump.AddTextEntry(56, 10, 25, text_color, lat_text, 50, 50, 10);
    gump.AddTextEntry(57, 55, 25, text_color, sysload_text, 100, 50, 10);
    gump.Update();
}

function latency_gump_callback(unused) {
    var code = CustomGumpResponse.ReturnCode();
    if (code == 0) {
        var gump = Orion.CreateCustomGump(1488);
        gump.Close();
    }
}

function latency_gump_creator() {
    var gump = Orion.CreateCustomGump(1488); // Create new custom gump with serial 1488
    gump.SetNoClose(true); 	// This gump will be no closable by a right mouse click
    gump.Clear(); // Clear gump cpntents (for rebuilds)
    gump.SetCallback('latency_gump_callback'); // Set callback function
    gump.AddResizepic(0, 0, '13BE', 200, 50);  // Main background 13BE
    // gump.AddGumpPic(100, 0, 0x941, 0);
    gump.AddButton(0, 170, 27, '0x5686', '0x5687', '0x5688', '0') // 0x5686 0x9a8
    poly_color = 400
    poly_width = 180
    gump.AddColoredPolygone(10, 10, poly_width, 10, poly_color, 0, 5, 1, 55);
    gump.Update();
}

// const DPS_FILE_PATH = Player.Name() + "_dps.log";
function watch_dps() {
    const _regex = /(\d\d?\d?)/g;
    const RESET_TIMER = 30 * 1000;
    var _total_dmg = 0;
    var _time_window = Orion.Now();
    while (true) {
        if (Orion.Now() - _time_window > RESET_TIMER) { // reset dps from time to time
            _time_window = Orion.Now();
            _total_dmg = 0;
        }
        Orion.Wait(10);
        if (_msg = Orion.WaitJournal('', Orion.Now() - 5, Orion.Now() + 10000, 'mobile', '', '0x0487')) {
            var _matches = _msg.Text().match(_regex);
            if (!_matches.length) continue;
            var _dmg = parseInt(_matches[0]);
            if (isNaN(_dmg)) {
                Orion.Print('[ERROR] _dmg is NaN, strange, found string = ' + _matches[0]);
                continue;
            }
            _total_dmg += _dmg;
            _dps = parseFloat(_total_dmg / ((Orion.Now() - _time_window) / 1000)).toFixed(2)
            process_progress_bar(1489, _dps, DPS_MAX, 14891, DMG_POLY_X, DMG_POLY_Y, 148911, ' dmg/s', 10, 25, 148912, 'total: '+_total_dmg, 95, 25);
        }
    }
}

function process_progress_bar(gump_id, val, val_max, 
    polygon_id, polygon_x, polygon_y,
    text_1_id, text_1_suffix, text_1_x, text_1_y,
    text_2_id, text_2, text_2_x, text_2_y ){
    const width_max = 180;
    const green = '#66ff66';
    const yellow = '#ffff00';
    const red = '#ff0000';
    const green_text = 70;
    const yellow_text = 50;
    const red_text = 30;
    var color = red ;
    var text_color = red_text;
    if ( val > 0.3 * val_max) {
        color = yellow;
        text_color = yellow_text;
    }
    if ( val > 0.5 * val_max) {
        color = green;
        text_color = green_text;
    }
    if ( val > val_max) {
        width = width_max;
    } else {
        width = val / val_max * width_max;
    }
    var text1 = val + text_1_suffix;
    var gump = Orion.CreateCustomGump(gump_id);
    gump.AddColoredPolygone(polygon_x, polygon_y, width, 10, color, 0, 5, 1, polygon_id);
    gump.AddTextEntry(text_1_id, text_1_x, text_1_y, text_color, text1, 100, 50, 20);
    gump.AddTextEntry(text_2_id, text_2_x, text_2_y, text_color, text_2, 100, 50, 20);
    gump.Update();
}

function efficiency_gump_callback(unused) {
    var code = CustomGumpResponse.ReturnCode();
    if (code == 0) {
        var gump = Orion.CreateCustomGump(1489);
        gump.Close();
    }
    if (code == 1) {
        var gump = Orion.CreateCustomGump(1489);
        Orion.Print('reset exp')
        rewrite_file(EXP_FILE_PATH, 0);
        process_progress_bar(1489, 0, EXP_PER_MIN_MAX, 14892, EXP_POLY_X, EXP_POLY_Y, 148921, ' exp/min', 10, 25+EXP_POLY_Y-DMG_POLY_X, 148922, 'reseted', 95, 25+EXP_POLY_Y-DMG_POLY_X);
    }
}

function gump_watch() {
    const POST_TO_DISCORD = false; // obvious
    const POST_TO_TELEGRAM = true; // also
    IGNORED_GUMP_TEXT = 'ZHE PvP/PvM Stats|SKILLS|Choose your Class'; // all the gumps, containing the text will not raise alert
    var _i;
    var gump;
    var _message = 'none'; 
    var _sent = '';
    while (true) {
        Orion.Wait(500);
        for (_i=0; _i<Orion.GumpCount();_i++) {
            // Orion.Print('gump #'+_i);
            gump = Orion.GetGump(_i);
            if (!gump) continue;
            if (!gump.Replayed()) {
                if (Orion.Contains(gump.TextList(), IGNORED_GUMP_TEXT) ) {
                    continue;
                }
                if (_message != _sent) { 
                    Orion.InfoGump(_i);
                    _message = '⚠️ GUMP alert. \n Serial: {'+gump.Serial()+'} \n ID: {'+gump.ID()+'} \nText:\n'+gump.TextList();
                    if (POST_TO_DISCORD) discord_post(_message);
                    if (POST_TO_TELEGRAM) telegram_post(_message);
                    _sent = _message;
                }
            }
        }
    }
}

const DMG_POLY_X = 10;
const DMG_POLY_Y = 10;
const EXP_POLY_X = 10;
const EXP_POLY_Y = 50;
const GOLD_POLY_X = 10;
const GOLD_POLY_Y = 90;
function efficiency_gump_creator() {
    var gump = Orion.CreateCustomGump(1489); // Create new custom gump with serial 1489
    gump.SetNoClose(true); 	// This gump will be no closable by a right mouse click
    gump.Clear(); // Clear gump cpntents (for rebuilds)
    gump.SetCallback('efficiency_gump_callback'); // Set callback function
    gump.AddResizepic(0, 0, '0x24EA', 200, 150);  // Main background 
    // 13BE DB0 E10 0x1400 0x23f0 0x2422 0x2436 0x2454 0x2486 0x24EA
    gump.AddButton(0, 170, 123, '0x5686', '0x5687', '0x5688', '0') // close button 0x5686
    gump.AddButton(1, 0, 120, '0x5666', '0x5667', '0x5668', '0') // reset button 0x5666
    // gump.AddTextEntry(2, 20, 123, '0xFFFF', 'reset exp', 100, 50, 20);
    const poly_color = 400;
    const poly_width = 180;
    gump.AddColoredPolygone(DMG_POLY_X, DMG_POLY_Y, poly_width, 10, poly_color, 0, 5, 1, 14891);
    gump.AddColoredPolygone(EXP_POLY_X, EXP_POLY_Y, poly_width, 10, poly_color, 0, 5, 1, 14892);
    gump.AddColoredPolygone(GOLD_POLY_X, GOLD_POLY_Y, poly_width, 10, poly_color, 0, 5, 1, 14893);
    gump.Update();
}


function watch_exp() {
    // add button to reset exp
    const _regex = /(\d\d?\d?)/g;
    const _watch_begin_time = Orion.Now();
    while (true) {
        Orion.Wait(10);
        if (_exp_msg = Orion.WaitJournal("experience", Orion.Now(), Orion.Now() + 10000, '', '0', 'any')) {
            if (_exp_msg.Text().indexOf('have gained') !== -1) {
                var _matches = _exp_msg.Text().match(_regex);
                if (!_matches) continue;
                var _exp_gained = parseInt(_matches[0]);
                if (isNaN(_exp_gained)) {
                    Orion.Print('[ERROR] _exp_gained is NaN, strange, found string = ' + _matches[0]);
                    continue;
                }
                var _current_exp = load_from_file(EXP_FILE_PATH);
                if (isNaN(_exp_gained)) {
                    Orion.Print('[ERROR] _current_exp is NaN, strange, _current_exp = ' + _current_exp);
                    continue;
                }
                _current_exp += _exp_gained;
                // Orion.Print('Total exp gained: ' + _current_exp);
                _exp_per_min = parseFloat(_current_exp / ( (Orion.Now() - _watch_begin_time) / 1000 / 60)).toFixed(0);
                process_progress_bar(1489, _exp_per_min, EXP_PER_MIN_MAX, 14892, EXP_POLY_X, EXP_POLY_Y, 148921, ' exp/min', 10, 25+EXP_POLY_Y-DMG_POLY_X, 148922, 'total: '+_current_exp, 95, 25+EXP_POLY_Y-DMG_POLY_X);
                save_to_file(EXP_FILE_PATH, _current_exp);
            }
        }
    }
}