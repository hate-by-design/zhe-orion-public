//#include ZHE/helpers.oajs
//#include ZHE/heal.oajs
//#include ZHE/test_zone.oajs
//#include ZHE/services.oajs
//#include ZHE/utils.oajs
//#include ZHE/skills.oajs

// Types
const CLEAN_BANDAGES = 0x0e21;
//// Healing SETTINGS////
const HEALING_THRESHOLD = 95; // Health % to start healing
const HEALING_TIMER_X = 1175;
const HEALING_TIMER_Y = 550;
const SKINNING_TIMER_X = 1175;
const SKINNING_TIMER_Y = 600;
//// Healing SETTINGS////

//// MISC SETTINGS ////
const DURABILITY_THRESHOLD = 5; // Durability % below which to notify
const LOOT_FINDLIST = 'loot_list'; // Name of findlist to search loot types in
//// MISC SETTINGS ////

//// EFFICIENCY GUMP SETTINGS ////
const DPS_MAX = 16;
const EXP_PER_MIN_MAX = 1000;
const GP_PER_MIN_MAX = 1000;
//// EFFICIENCY GUMP SETTINGS ////

//// PATH SETTINGS ////
const GOLD_FILE_PATH = Player.Name() + "_gold.log";
const LOOT_TIMESTAMP_FILE_PATH = Player.Name() + "_loot_timestamp.log";
const EXP_FILE_PATH = Player.Name() + "_exp_gained.log";
const NOTIFY_SOUND = "reminder.wav" // path to notification sound
const ALERT_SOUND = "OA/alert.wav" // path to notification sound
//// PATH SETTINGS ////

function Autostart() {
    Orion.SetLOSOptions("pollosthroughtwindows"); //|polusenoshoot");
    scripts_to_run = [
        'autoheal',
        'auto_hungry',
        'watch_durability',
        'auto_guards',
        'lag_watch',
        'watch_death',
        'watch_exp',
        'efficiency_gump_creator',
        'watch_dps'
    ]
    for (_sc = 0; _sc < scripts_to_run.length; _sc++) {
        Orion.Exec(scripts_to_run[_sc], true);
    }
}

function walk_to() {
   var x = 3761;
   var y = 1323;
   var z = 0;
    Orion.WalkTo(x,y,z)
}

function reset_exp() {
    rewrite_file(EXP_FILE_PATH, 0);
}
function loot_toggle() {
    var _loot_started;
    if (Orion.ScriptRunning('loot_new_age')) {
        var _earned = load_from_file(GOLD_FILE_PATH);
        _loot_started = load_from_file(LOOT_TIMESTAMP_FILE_PATH);
        _time_spent = (Orion.Now() - _loot_started) / 1000;
        _message = 'Earned ' + _earned + 'gp in ' + parseFloat(_time_spent / 60).toFixed(2) + ' mins.\nRate is ' + parseFloat(_earned / (_time_spent / 60)).toFixed(2) + ' gp/min';
        Orion.Print(":gold: "+_message)
        // if (_time_spent > 60) discord_post(_message)
        Orion.Terminate('loot_new_age');
        Orion.CharPrint(Player.Serial(), 0x031, 'Loot : OFF');
    } else {
        _loot_started = Orion.Now();
        rewrite_file(LOOT_TIMESTAMP_FILE_PATH, _loot_started);
        rewrite_file(GOLD_FILE_PATH, 0);
        Orion.Exec('loot_new_age');
        Orion.CharPrint(Player.Serial(), 0x031, 'Loot : ON');
    }
}

//// Attack
function attack_nts() {
    _target = Orion.TargetSystemSerial();
    if (_target) {
        _enemy = Orion.FindObject(_target);
        if (_enemy) {
            Orion.CharPrint(_enemy.Serial(), 53, "> Target <");
            if (!Player.WarMode()) Orion.WarMode(true);
            Orion.Attack(_target);
        }
    }
}

function unwar() {
    var shield = 0x1B74; //0x1b76;
    while (!Player.Dead()) {
        if (!Orion.ObjAtLayer("LeftHand")) {
            if (Orion.FindType(shield)) {
                Orion.EquipT(shield);
                Orion.Wait(500);
            }
        }
        if (Player.WarMode() == true) Orion.WarMode(false);
        Orion.Wait(100);
    }
}